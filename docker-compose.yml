#version: '3.8'
#
#services:
#  db:
#    image: postgres:15
#    container_name: whatsapp-postgres
#    restart: always
#    ports:
#      - "5432:5432"
#    environment:
#      POSTGRES_DB: whatsapp_db
#      POSTGRES_USER: postgres
#      POSTGRES_PASSWORD: postgres
#    volumes:
#      - pgdata:/var/lib/postgresql/data
#
#  app:
#    build:
#      context: .
#      dockerfile: Dockerfile
#    container_name: whatsapp-app
#    ports:
#      - "8080:8080"
#    depends_on:
#      - db
#    environment:
#      SPRING_DATASOURCE_URL: jdbc:postgresql://db:5432/whatsapp_db
#      SPRING_DATASOURCE_USERNAME: postgres
#      SPRING_DATASOURCE_PASSWORD: postgres
#    command: ["java", "-jar", "app.jar"]
#
#volumes:
#  pgdata:
version: "3.9"

services:
  db:
    image: postgres:15
    container_name: whatsapp-postgres
    ports:
      - "5433:5432"  # Change if 5432 is occupied
    environment:
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_USER: ${DB_USERNAME}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  rabbitmq:
    image: rabbitmq:3-management
    container_name: whatsapp-rabbitmq
    ports:
      - "5672:5672"     # AMQP port
      - "15672:15672"   # Web UI
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_USERNAME}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_PASSWORD}
    healthcheck:
      test: [ "CMD", "rabbitmqctl", "status" ]
      interval: 10s
      timeout: 10s
      retries: 5

  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: whatsapp-app
    ports:
      - "8080:8080"
    depends_on:
      db:
        condition: service_healthy
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://db:5432/${DB_NAME}
      SPRING_DATASOURCE_USERNAME: ${DB_USERNAME}
      SPRING_DATASOURCE_PASSWORD: ${DB_PASSWORD}
      WHATSAPP_TOKEN: ${WHATSAPP_TOKEN}
      WHATSAPP_PHONE_NUMBER_ID: ${WHATSAPP_PHONE_NUMBER_ID}
      OTEL_SERVICE_NAME: ${OTEL_SERVICE_NAME}
      OTEL_EXPORTER_OTLP_ENDPOINT: ${OTEL_EXPORTER_OTLP_ENDPOINT}
      OTEL_EXPORTER_OTLP_PROTOCOL: ${OTEL_EXPORTER_OTLP_PROTOCOL}
      PROMETHEUS_ALLOWED_IPS: ${PROMETHEUS_ALLOWED_IPS}
      CORS_ALLOWED_ORIGIN: ${CORS_ALLOWED_ORIGIN}
      RABBITMQ_HOST: rabbitmq
      RABBITMQ_PORT: 5672
      RABBITMQ_USERNAME: guest
      RABBITMQ_PASSWORD: guest
